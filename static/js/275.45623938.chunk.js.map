{"version":3,"file":"static/js/275.45623938.chunk.js","mappings":"mUAUMA,EAAYC,EAAAA,EAAAA,OAAH,sUA8Ef,EAlEkB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAIjB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAwBI,OACI,kBAAMC,SAvBU,SAACC,GAGrB,GAFAA,EAAEC,iBAEkB,KAAhBJ,EAAJ,CAQA,IAAMK,EAAkBL,EAAYM,OAAOC,cAC3CT,EAAgB,CAAEU,MAAOH,IACzBJ,EAAe,GAPd,MAFGQ,EAAAA,GAAAA,MAAY,mCAUnB,EASwCC,MAAO,CACpCC,QAAS,OAETC,WAAY,UAHhB,WAKI,kBACIC,KAAK,OACLC,MAAOd,EACPe,SAfO,SAACZ,GACpB,IAAQW,EAAUX,EAAEa,cAAZF,MACRb,EAAea,EAClB,EAaeJ,MAAO,CACHO,OAAQ,OACRC,MAAO,QACPC,SAAU,WAGlB,SAACvB,EAAD,CAAWiB,KAAK,SAAhB,UACI,SAAC,MAAD,CAAUH,MAAO,CACbO,OAAQ,OACRN,QAAS,OACTC,WAAY,eAKpB,SAAC,KAAD,CACAQ,UAAW,IACXC,SAAS,YACTC,MAAM,UACNZ,MAAO,CAAES,SAAS,YAM7B,EC5ECI,EAAc1B,EAAAA,EAAAA,GAAH,qEAgGjB,GA1FkBA,EAAAA,EAAAA,OAAH,sUAaA,WAEX,OAAwC2B,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqB3B,EAArB,KACMU,EAAQiB,EAAaC,IAAI,SACzBC,GAAWC,EAAAA,EAAAA,MAIjB,GAAsC7B,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAgDA,OA7CA4B,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAa,IAAIC,gBAKvB,GAAKvB,EAAL,CAGU,IAGSwB,EAHV,mCAGL,gHAI+BC,EAAAA,EAAAA,GAAW,CAACC,UAAU,qCAAD,OAAuC1B,EAAvC,iCAJpD,cAIc2B,EAJd,gBAMkCA,EAASC,KAAKC,QAAQC,KAAI,YAEpD,MAAO,CAAEC,GAF8D,EAAhBA,GAE1CC,MAF0D,EAAZA,MAG1D,IATT,UAUmC,KAJrBC,EANd,QAUwBC,OAVxB,yCAYmBjC,EAAAA,GAAAA,MAAY,gDAZ/B,OAgBQR,GAAe,OAAIwC,IAhB3B,kDAkBQE,QAAQC,IAAR,MAlBR,0DAHK,qDA6BT,OAHAZ,IAGO,WACHF,EAAWe,OAClB,CAJA,CAKA,GAAE,CAACrC,KAKA,iBAAKE,MAAO,CACRC,QAAS,OACTmC,cAAe,SACfC,QAAS,QAHb,WAMI,SAAC,EAAD,CAAWjD,gBAAiBA,KAI5B,wBACKE,EAAYsC,KAAI,SAAAU,GAAI,OACjB,SAACzB,EAAD,WAA2B,SAAC,KAAD,CAAM0B,GAAE,kBAAaD,EAAKT,IAAMW,MAAO,CAAEC,KAAMxB,GAAYjB,MAAO,CAAE0C,MAAO,QAASC,eAAe,QAAnG,SAA8GL,EAAKR,SAA5HQ,EAAKT,GADN,QAOpC,E,8FCtGKe,EAAU,mCAMT,SAAerB,EAAtB,+CAAO,OAAP,oBAAO,8FAA2BC,EAA3B,EAA2BA,UAA3B,kBAIwBqB,EAAAA,EAAAA,IAAUrB,EAAW,CAACsB,OAAQ,CAACC,QAASH,KAJhE,cAIOnB,EAJP,yBAKQA,GALR,gCAQCQ,QAAQC,IAAR,MARD,gFAJPW,EAAAA,EAAAA,SAAAA,QADiB,+B","sources":["components/Searchbar/Searchbar.jsx","pages/Movies.jsx","services/API.jsx"],"sourcesContent":["import { useState} from \"react\";\nimport { FaSearch } from 'react-icons/fa/';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport PropTypes from 'prop-types';\n\nimport styled from '@emotion/styled'\n// import Searchbar from \"components/Searchbar/Searchbar\";\n\n\nconst StyledBtn = styled.button`\n                height: 35px;\n                border: none;\n                font: inherit;\n                color: inherit;\n                background-color: #E186D6;\n                color: white;\n                :hover {\n                        background-color: #dd9bd5\n                    }\n`\n\nconst Searchbar = ({ setSearchParams }) => {\n    // const [searchParams, setSearchParams] = useSearchParams();\n    // const query = searchParams.get(\"query\");\n\n    const [querySearch, setQuerySearch] = useState('')\n\n    const onHandleCSubmit = (e) => {\n        e.preventDefault()\n\n        if (querySearch === \"\" ) {\n            toast.error('The search field cannot be empty')\n            return;\n        }\n\n        \n\n\n        const normalizedQuery = querySearch.trim().toLowerCase()\n        setSearchParams({ query: normalizedQuery })\n        setQuerySearch('')\n    }\n    \n    const onHandleChange = (e) => {\n        const { value } = e.currentTarget\n        setQuerySearch(value)\n    }\n\n\n        return (\n            <form onSubmit={onHandleCSubmit} style={{\n                display: 'flex',\n               \n                alignItems: 'center'\n            }}>\n                <input\n                    type=\"text\"\n                    value={querySearch}\n                    onChange={onHandleChange}\n                    style={{\n                        height: '30px',\n                        width: '300px',\n                        fontSize: '20px'\n                    }}\n                />\n                <StyledBtn type=\"submit\" >\n                    <FaSearch style={{\n                        height: '30px',\n                        display: 'flex',\n                        alignItems: 'center'\n\n                    }} />\n                </StyledBtn>\n\n                <ToastContainer\n                autoClose={3000}\n                position=\"top-right\"\n                theme=\"colored\"\n                style={{ fontSize:'30px'}}\n/>\n            </form>\n\n            \n        )\n    }\n\n\nexport default Searchbar;\n\nSearchbar.propTypes = {\n    setSearchParams: PropTypes.func.isRequired,\n}","import { useState, useEffect} from \"react\";\nimport { Link, useSearchParams, useLocation  } from \"react-router-dom\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { fetchMovie } from \"services/API\";\n\nimport styled from '@emotion/styled'\nimport Searchbar from \"components/Searchbar/Searchbar\";\n\nconst StyledLinks = styled.li`\n    :hover {\n        color: #E186D6\n    }\n`\n\nconst StyledBtn = styled.button`\n                height: 35px;\n                border: none;\n                font: inherit;\n                color: inherit;\n                background-color: #E186D6;\n                color: white;\n                :hover {\n                        background-color: #dd9bd5\n                    }\n`\n\n\nconst Movies = () => {\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get(\"query\");\n    const location = useLocation();\n\n\n\n    const [querySearch, setQuerySearch] = useState([])\n\n\n    useEffect(() => {\n        const controller = new AbortController();\n        \n\n        \n\n        if (!query) {\n            return\n        }\n            else {\n            \n            \n            async function movieSearch() {\n            \n                try {\n                    \n                    const response = await fetchMovie({fetchInfo: `search/movie?language=en-US&query=${query}&page=1&include_adult=false`})\n            \n                    const MoviesArray = await response.data.results.map(({ id, title }) => {\n                        \n                    return { id, title }\n                    })\n                    if (MoviesArray.length === 0 ) {\n                        \n                        return toast.error('We did not find any movies for your request')}\n\n                    \n\n                    setQuerySearch([...MoviesArray])\n                } catch (error) {\n                    console.log(error);\n                }\n            \n      \n    }\n        movieSearch()\n    }\n\n        return () => {\n            controller.abort();\n    };\n    }, [query])\n\n\n\n    return (\n        <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            padding: '40px',\n        }}>\n\n            <Searchbar setSearchParams={setSearchParams} />\n            \n    \n            \n            <ul>\n                {querySearch.map(item => (\n                    <StyledLinks key={item.id}><Link to={`/movies/${item.id}`} state={{ from: location }} style={{ color: 'black', textDecoration:'none',}}>{item.title}</Link></StyledLinks>\n                ))}\n            </ul>\n\n            \n    </div>)\n}\n\nexport default Movies;","import axios from 'axios';\nconst API_KEY = '192012529bcb26605650afbe6892300f'\nconst BASE_URL = 'https://api.themoviedb.org/3/'\naxios.defaults.baseURL = BASE_URL;\n\n\n\nexport async function fetchMovie({fetchInfo}) {\n\n    try {\n        \n        const response = await axios.get(fetchInfo, {params: {api_key: API_KEY}})\n        return response\n\n    } catch (error) {\n        console.log(error);\n    }\n    \n}"],"names":["StyledBtn","styled","setSearchParams","useState","querySearch","setQuerySearch","onSubmit","e","preventDefault","normalizedQuery","trim","toLowerCase","query","toast","style","display","alignItems","type","value","onChange","currentTarget","height","width","fontSize","autoClose","position","theme","StyledLinks","useSearchParams","searchParams","get","location","useLocation","useEffect","controller","AbortController","movieSearch","fetchMovie","fetchInfo","response","data","results","map","id","title","MoviesArray","length","console","log","abort","flexDirection","padding","item","to","state","from","color","textDecoration","API_KEY","axios","params","api_key"],"sourceRoot":""}